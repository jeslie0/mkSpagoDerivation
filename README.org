#+title: mkSpagoDerivation
#+author: James Leslie
[[https://img.shields.io/badge/built%20for-PureScript-1d222d.svg]]  [[https://img.shields.io/github/license/jeslie0/mkelmderivation.svg]]

This flake provides an unopinionated approach to packaging [[https://github.com/purescript/purescript][PureScript]] projects with the [[https://github.com/NixOS/nixpkgs][Nix]] package manager. Leveraging [[https://github.com/purescript/registry][PureScript's registry]], this repository facilitates the creation of reproducible builds for PureScript projects with minimal complexity. This works by treating a PureScript project's =spago.yaml= as a single source of truth for dependencies.

* Examples
The most important function that this flake provides is the ~mkSpagoDerivation~ function, exposed as both an output and via an overlay. This provides a wrapper around ~stdenv.mkDerivation~ which puts all of your project's dependencies in the right place, making it easy for you to build your projects reproducibly.

Here is a simple =flake.nix= that builds a PureScript project.
#+begin_src nix
{
  description = "A development shell for a PureScript project.";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixpkgs-unstable";
    flake-utils.url = "github:numtide/flake-utils";
    mkSpagoDerivation.url = "github:jeslie0/mkSpagoDerivation";
  };

  outputs = { self, nixpkgs, flake-utils, mkSpagoDerivation }:
    flake-utils.lib.eachDefaultSystem (
      system:
      let
        pkgs = import nixpkgs {
          inherit system;
          overlays = [ mkSpagoDerivation.overlays.default ];
        };
      in
        {
          packages.default =
            pkgs.mkSpagoDerivation {
              spagoYamlFile = ./spago.yaml;
              src = ./.;
              version = "0.1.0";
              buildPhase = "spago build";
              installPhase = "mkdir $out; cp -r output $out";
            };
        }
    );
}
#+end_src

The only attribute ~mkSpagoDerivation~ requires is ~src~. Everything else is passed into ~mkDerivation~. The default ~buildPhase~ runs =spago build= and the default ~installPhase~ copies the output directory (either specified in =spago.yaml= or otherwise just =output*=) into =$out=. The function uses specific versions of Spago, the PureScript compiler and Git to build its output, however; these three programs can be overridden by passing the different versions straight into ~mkSpagoDerivation~'s argument set. Other dependencies can be added through ~buildInputs~ or ~nativeBuildInputs~. The following example demonstrates this, by using the [[https://github.com/aristanetworks/purescript-backend-optimizer][purescript-backend-optimizer]] and using a the unstable PureScript compiler from the PureScript Overlay.
#+begin_src nix
{
  description = "A development shell for a PureScript project.";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixpkgs-unstable";
    flake-utils.url = "github:numtide/flake-utils";
    ps-overlay.url = "github:thomashoneyman/purescript-overlay";
    mkSpagoDerivation.url = "github:jeslie0/mkSpagoDerivation";
  };

  outputs = { self, nixpkgs, flake-utils, ps-overlay, mkSpagoDerivation }:
    flake-utils.lib.eachDefaultSystem (
      system:
      let
        pkgs = import nixpkgs {
          inherit system;
          overlays = [ mkSpagoDerivation.overlays.default
                       ps-overlay.overlays.default
                     ];
        };
      in
        {
          packages.default =
            pkgs.mkSpagoDerivation {
              spagoYamlFile = ./spago.yaml;
              src = ./.;
              version = "0.1.0";
              nativeBuildInputs = [ pkgs.esbuild pkgs.purs-backend-es ];
              buildPhase = "spago build && purs-backend-es bundle-app --no-build --minify --to=main.min.js";
              installPhase = "mkdir $out; cp -r main.min.js $out";
              purs = pkgs.purs-unstable;
            };
        }
    );
}
#+end_src

Also exposed are the functions ~buildDotSpago~ (which builds a project's =.spago= directory) and ~buildSpagoNodeJs~ (which builds the =spago-nodejs= directory, typically located in the user's =.cache= directory). Each function takes a Nix attribute set representing the user's =spago.yaml= as input. You can create this attribute set using the ~fromYAML~ fuction, provided by this flake (in an overlay and an output). This function is also used by ~mkSpagoDerivation~ and requires [[https://nixos.org/manual/nix/unstable/language/import-from-derivation][Import From Derivation]] (IFD). When a method for transforming a YAML file into a Nix attribute set that doesn't require IFD becomes available, we will adopt it.

* Notes
** Hooks
The ~buildPhase~ and ~installPhase~ always run =pre= and =post= hooks, even if the commands provided by the user don't specify them.

** TODOs
- [ ] Allow more complex dependencies in the =spago.yaml= file.
  Currently, only dependencies from the specified package set are fetched. More complex dependency (such as dependencies not located in the registry) management will be added in the future.

* Related
** [[https://github.com/purifix/purifix/][Purifix]]
A different tool to package PureScript programs with Nix.
** [[https://github.com/justinwoo/spago2nix][spago2nix]]
Another tool for packaging PureScript programs with Nix.
** [[https://github.com/jesli0/mkElmDerivation][mkElmDerivation]]
A similar tool (that I created) to package [[https://elm-lang.org/][Elm]] applications with Nix.
