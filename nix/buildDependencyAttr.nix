{ stdenv, registry, registry-index, lib }:
{symlink ? false}:
spagoNix:
extraPackageNames:

let
  registryNixPackages =
    let
      packageSet =
        spagoNix.workspace.package_set;

      packageSetRegistry =
        if packageSet ? "registry"
          # Registry value is specified
        then
          let
            registryVersion =
              packageSet.registry;
          in
            builtins.fromJSON (builtins.readFile "${registry}/package-sets/${registryVersion}.json")
              # Registry value isn't specified.
        else
          let
            registryFile =
              if packageSet ? "path"
              then packageSet.path
              else
                if (packageSet ? "url") && (packageSet ? "hash")
                then
                  builtins.fromJSON (builtins.readFile (stdenv.mkDerivation {
                    preferLocalBuild = true;
                    allowSubstitutes = false;
                    name = "${spagoNix.package.name}-package_set";
                    phases = [ "buildPhase" ];
                    src = builtins.fetchurl {
                      url = packageSet.url;
                      hash = packageSet.hash;
                    };
                    buildPhase = "cat * > $out";
                  }))
                else throw "Can't determine package set. In the spago.yaml file's workspace.package_set, specify a registry value, give a path, or give a url and a hash (the hash is generated by spago)";
          in builtins.fromJSON (builtins.readFile registryFile);
    in
      if packageSetRegistry ? "packages"
      then { registry = packageSetRegistry.packages; legacy = false;}
      else { registry = packageSetRegistry; legacy = true; };


  # [{pname, version}]
  directDependencies =
    let
      dependencyNamesArray =
        extraPackageNames ++ spagoNix.package.dependencies;
    in
      builtins.map (pname: { inherit pname; version = registryNixPackages.registry.${pname}; }) dependencyNamesArray;

  # We start by getting the direct package dependencies from the
  # spago.yaml file. We then need to get all of this package's
  # dependencies and store them. This is an iterative/recursive
  # process and we are finished when we have a complete list of
  # packages. We can use the package set to find the desired version.
  # {pname, version} -> [{ pname, version } | {pname, git, ref}]
  getPackageDependencies = { pname, version, git ? null, ref ? null}:
    let
      nameLength =
        builtins.stringLength pname;

      firstTwoChars =
        builtins.substring 0 2 pname;

      firstChar =
        builtins.substring 0 1 pname;

      nextTwoChars =
        builtins.substring 2 2 pname;

      indexFile =
        if nameLength <= 2
        then "${registry-index}/2/${pname}"
        else
          if nameLength <= 3
          then "${registry-index}/3/${firstChar}/${pname}"
          else "${registry-index}/${firstTwoChars}/${nextTwoChars}/${pname}";

      jsonArray =
        let
          splitFile =
            (lib.strings.split
              "\n"
              (builtins.readFile indexFile));
        in
          builtins.map
            (str: builtins.fromJSON str)
            (builtins.filter
              (str: str != "" && builtins.typeOf str == "string")
              splitFile);

      correctJson =
        lib.lists.findSingle
          (json: json.version == version)
          null
          null
          jsonArray;

      dependencyNamesArray =
        if builtins.hasAttr "dependencies" registryNixPackages.registry
        then registryNixPackages.registry.dependencies
        else
          if correctJson == null
          then throw "Error! Could not find version ${version} of ${pname} in registry-index."
          else builtins.attrNames correctJson.dependencies;
    in
      builtins.map
        (pname:
          if (builtins.hasAttr pname registryNixPackages.registry) && (registryNixPackages.registry.${pname} ? "version" )
          then { inherit pname; version = registryNixPackages.registry.${pname}.version; }
          else
            if registryNixPackages.registry.${pname} ? "git"
            then {
              inherit pname;
              git = registryNixPackages.registry.${pname}.git;
              ref = registryNixPackages.registry.${pname}.ref;
            }
            else { inherit pname; version = registryNixPackages.registry.${pname}; }
        )
        dependencyNamesArray;



  # Point-free. Takes two arguments:
  # attr: arr:
  buildDependencyAttr =
    builtins.foldl'
      (acc: cur:
        if builtins.hasAttr cur.pname acc
        then acc
        else
          let
            newDeps = getPackageDependencies cur;
          in
            buildDependencyAttr ({${cur.pname} = cur;} //  acc) newDeps
      );
in
attr: buildDependencyAttr attr directDependencies
